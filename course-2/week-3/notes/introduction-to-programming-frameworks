-- Deep Learning Frameworks --

Pointers for choosing deep learning frameworks:
	Ease of programming (development and deployment)
	Running speed
	!Truly open (open source with good governance)

===============================================================================
-- TensorFlow --

import numpy as np
import tensorflow as tf

w = tf.Variable(0, dtype=tf.float32)
optimizer = tf.keras.optimizers.Adam(0.1)

def train_step():
	with tf.GradientType() as tape:
		cost = w ** 2 - 10*w + 25
	trainable_variables = [w]
	grads = tape.gradient(cost, trainable_variables)
	optimizer.apply_gradients(zip(grads, trainable_variables))

print(w)	

--------------------------------------

w = tf.Variable(0, dtype=tf.float32)
x = np.array([1.0, -10.0, 25.0], ftype=np.float32)
optimizer = tf.keras.optimizers.Adam(0.1)

def training(x, w, optimizer):
	def cost_fn():
		return x[0]*w**2 + x[1]*w + x[2]
	for i in range(1000):
		optimizer.minimize(cost_fn, [w])
	return w

w = training(x, w, optimizer)
print(w)

(^This does the same as the code above except that the coefficients are defined in an array) 

"The heart of a TensorFlow program is to compute the cost function

===============================================================================
